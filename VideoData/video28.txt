Here's a coding interview question from Google.
[00:03.000 --> 00:09.000]  This is a fairly simple problem, so it's probably a sort of question that's often asked on a phone interview.
[00:09.000 --> 00:11.000]  And here's the problem.
[00:11.000 --> 00:19.000]  You're given a string, and you're supposed to write a function that takes that string and returns the first recurring character in that string.
[00:19.000 --> 00:28.000]  So for example, if you're given this string as the input, a, b, c, a, there's only one recurring character in the string a,
[00:28.000 --> 00:31.000]  so your function should return a.
[00:31.000 --> 00:44.000]  If you're given this string, b, c, a, b, a, you see that there are two recurring characters, b and a, and the first recurring character is b,
[00:44.000 --> 00:48.000]  so you should return b from your function.
[00:48.000 --> 00:53.000]  If you're given this string, a, b, c, there is no recurring character in this string,
[00:53.000 --> 01:00.000]  so your function should return either null or none, depending on the language that you're using.
[01:00.000 --> 01:07.000]  Now for practice, I'd recommend that you pause the video right here, think about it for a second, and then come back to the video.
[01:07.000 --> 01:12.000]  Now when you're given this problem, initially you may come up with a naive solution like this one.
[01:12.000 --> 01:17.000]  In our naive solution, we're going to first check the first character in the given string.
[01:17.000 --> 01:22.000]  For example, this string on the screen, the first character in this string is d,
[01:22.000 --> 01:30.000]  and we're going to ask ourselves, is there another occurrence of the same character d in the subsequent characters?
[01:30.000 --> 01:40.000]  We can check this character by character, and the answer is no, there's no other occurrence of d, so we can move on to the next character, b.
[01:40.000 --> 01:44.000]  And then we can go through the same process.
[01:44.000 --> 01:49.000]  Ask ourselves, is there another occurrence of b in the subsequent characters?
[01:49.000 --> 01:54.000]  Check that character by character, and once we get to this other occurrence of b,
[01:54.000 --> 02:03.000]  we'll know that b is the first recurring character in the string, so we can just return b from our function, and we're done.
[02:03.000 --> 02:13.000]  With this naive solution, we're essentially checking every potential pair of characters in the string to see if there is any recurring character.
[02:13.000 --> 02:25.000]  And so the number of pairs we need to check with this naive solution would be n choose 2, or n times n minus 1 divided by 2,
[02:25.000 --> 02:29.000]  which is equal to big O of n squared.
[02:29.000 --> 02:35.000]  And so the time complexity, or the runtime for this algorithm, would be big O of n squared.
[02:35.000 --> 02:38.000]  Let's see if we can do any better than that.
[02:38.000 --> 02:41.000]  And here's a more efficient solution to this problem.
[02:41.000 --> 02:50.000]  Instead of checking every potential pair of characters, we're going to go through this string only once from left to right, character by character.
[02:50.000 --> 03:01.000]  And as we see a character, we're going to store it in a data structure such as a set, a dictionary, or a hash table to show that we've seen this character already.
[03:01.000 --> 03:09.000]  So for example, when we're examining the first character, d, we're going to store it, let's say, in a hash table.
[03:09.000 --> 03:12.000]  And in a hash table, we need a key value pair.
[03:12.000 --> 03:15.000]  So we're going to use the character as the key.
[03:15.000 --> 03:21.000]  And the value could be anything, but let's just use one here to show that we've seen this character once.
[03:21.000 --> 03:32.000]  And when we go to the next character, in this case, b right here, we need to first ask ourselves, have we seen this character already before this character?
[03:32.000 --> 03:36.000]  And we can do that with this hash table.
[03:36.000 --> 03:40.000]  And the answer is no, because b is not in this hash table yet.
[03:40.000 --> 03:45.000]  So we're going to put b in this hash table as the key.
[03:45.000 --> 03:50.000]  And the value will be one again to show that we've seen this character once.
[03:50.000 --> 04:00.000]  We'll keep going like that until we get to a character that we've seen already, which is the second occurrence of b right here in this case.
[04:01.000 --> 04:08.000]  And we'll know that we've seen this character already because it's already in the hash table, of course.
[04:08.000 --> 04:15.000]  And at that point, we can return b in this particular case from our function and we're done.
[04:15.000 --> 04:27.000]  With this solution, because we only go through this string once from left to right, the time complexity or the runtime for this algorithm is bigger of n, where n is the number of characters in the string.
[04:27.000 --> 04:30.000]  Now, let's see what this solution might look like in code.
[04:30.000 --> 04:42.000]  We're going to define our function first recurring, which takes the given string, of course, for example, this one, and returns the first recurring character in that string.
[04:42.000 --> 04:45.000]  We're going to use sude code to explain this code.
[04:45.000 --> 04:56.000]  The first step in our function is to define counts, which is the dictionary or the hash table we're going to use to keep track of each character that we've seen.
[04:57.000 --> 05:05.000]  And then we're going to run a for loop for each character in the given string or for char in given string.
[05:05.000 --> 05:14.000]  And then if this character char is already in the dictionary or the hash table, then that means this is the first recurring character.
[05:14.000 --> 05:16.000]  So return that character.
[05:16.000 --> 05:33.000]  And if not, for example, if we're examining this first character in this particular example, D, put that character as a key in this dictionary or hash table and the value corresponding to that will be one.
[05:33.000 --> 05:39.000]  And again, this value could be anything, but I'm just using one to show that we've seen this character once.
[05:39.000 --> 05:46.000]  And here you might notice that I'm not using an else statement here, but that's just a style issue.
[05:46.000 --> 05:48.000]  So you could use it if you'd like to.
[05:48.000 --> 05:55.000]  Now, after this for loop, if we haven't returned yet, that means that there is no recurring character in the string.
[05:55.000 --> 06:01.000]  So in that case, either return none or null, depending on the language.
[06:01.000 --> 06:02.000]  And that's my solution.
[06:02.000 --> 06:05.000]  All right, guys, thanks so much for watching this video.
[06:05.000 --> 06:15.000]  One interesting variation to this problem is to find the first non-recurring character in the string instead of finding the first recurring character.
[06:15.000 --> 06:28.000]  I covered that problem and many other problems in my brand new Udemy course, 11 Essential Coding Interview Questions, in which I cover 11 of the most essential coding interview questions to master for your next coding interview.
[06:28.000 --> 06:32.000]  There's a discount code below in case you're interested in taking the course.
[06:32.000 --> 06:34.000]  Okay, thanks so much, and I'll see you soon.